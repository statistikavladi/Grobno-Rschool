tenFactor <- as.factor(10)
tenFactor
test <- one - tenFactor
test
test <- one - as.numeric(tenFactor)
test
one
tenFactor
as.numeric(tenFactor)
test <- one - as.integer(tenFactor)
test
as.integer(tenFactor)
as.character(tenFactor)
a <- as.character(tenFactor)
a
as.numeric(a)
one <- 1
tenFactor <- as.factor(10)
test <- one - as.numeric(as.character(tenFactor))
test
v1 <- TRUE + FALSE
v1
NA | TRUE
NA | FALSE
a,-TRUE
a<-TRUE
a==(NA|TRUE)
a==(NA|FALSE)
?NA
employers <- employers[[1]]
task3 <- "2"
typeof(task3)
length(NA)
length(0\)
length(0)
?NA
length(NA)
t * u
ref <-  page %>% html_nodes(".references li" )
%>% html_text()
ref <-  page %>%
html_nodes(".references li") %>%
html_text()
ref
xVector <- c("one", 2:20, as.factor(100))
xVector <- c(1, "one", 2:20, as.factor(100))
xVector
xVector <- c(1, "one", 2:20, 100.5)
xVector <- c(1:20, 100.5)
cat("First is:" xVector[1], "21st is:" xVector[21])
cat("First is:" ,xVector[1], "21st is:" ,xVector[21])
cat("First is:", xVector[1], "21st is:", xVector[21])
xVector <- as.numeric(xVector)
print(xVector[c(1, 21, 5)])
?norm
xVector <- norm(xVector)
xVector <- norm(as.numeric(xVector))
xVector <- xVector - min(xVector)
xVector <- max(xVector) - xVector
xVector
xVector <- c(1:20, 100.5)
cat("First is:", xVector[1], "21st is:", xVector[21])
xVector <- as.numeric(xVector)
print(xVector[c(1, 21, 5)])
xVector <- xVector - min(xVector)
xVector <- xVector/max(xVector)
xVector
xVector <- c(1:20, 100.5)
cat("First is:", xVector[1], "21st is:", xVector[21])
xVector <- as.numeric(xVector)
print(xVector[c(1, 21, 5)])
xVector <- xVector - min(xVector)
xVector <- xVector/max(xVector)* 2 - 1
xVector <- c(1:20, 100.5)
cat("First is:", xVector[1], "21st is:", xVector[21])
xVector <- as.numeric(xVector)
print(xVector[c(1, 21, 5)])
xVector <- xVector - min(xVector)
xVector <- xVector/max(xVector)* 2 - 1
xVector
poker <- c(2, 4, 1, -8, 1, 3, -5)
blackjack <- c(0, -3, 3, NA, 2, 1, -2)
poker <- c(2, 4, 1, -8, 1, 3, -5)
blackjack <- c(-1, -2, 4, 0, 1, -2, -1)
roulette <- c(0, -3, 3, NA, 2, 1, -2)
totalLost <- sum(poker, na.rm = )
sum(poker)
sum(poker, na.rm = TRUE)
totalLost <- sum(poker, na.rm = TRUE)
poker + blackjack
is.na(blackjack)
totalLost <-  poker + blackjack
NA + 3 +2
totalLost <- sum(totalLost)
totalLost <- sum(totalLost) - sum(roulette, na.rm = TRUE)
totalLost
roulette[is.na(roulette)]
roulette[!is.na(roulette)]
roulette[is.na(roulette)]
roulette[4] <- 3 - totalLost
roulette
totalLost
roulette[4] <- 3 + totalLost
totalLost
poker <- c(2, 4, 1, -8, 1, 3, -5)
blackjack <- c(-1, -2, 4, 0, 1, -2, -1)
roulette <- c(0, -3, 3, NA, 2, 1, -2)
totalLost <-  poker + blackjack
totalLost <- sum(totalLost) - sum(roulette, na.rm = TRUE)
roulette[4] <- 3 + totalLost
roulette
cards <- c("hearts" = 12, "spades"  = 12, "clubs" = 12, "diamonds" = 12)
names(cards)
cards
cards["h"]
cards["h"]
cards["hearts"]
cards["hearts"][2]
cards["hearts"]
a <- cards["hearts"]
a
1/46
cards['h']
cards[!cards("hearts")]
cards[!("hearts")]
cards[("hearts")]
cards[cards != cards("hearts")]
cards
cards <- c("hearts" = 11, "spades"  = 9, "clubs" = 13, "diamonds" =13 )
cards["spades"]
names(cards)
names(cards)[1]
names(cards)[2:4]
cards[names(cards)[2:4]]
probs <- cards["spades"] / sum(cards[names(cards)[2:4]])
probs
cards
probs <- cards["spades"] / sum(cards[names(cards)[1:4]])
probs
names(probs)
names(probas) <- "Probability"
names(probs) <- "Probability"
probs
probs <- cards["spades"] / sum(cards)
names(probs) <- "Probability"
?which
which(1:10)
which(1:10)
lv <- poker + blackjack + roulette
which(lv > 0)
poker <-     c(2,   4, 1, -8,  1,   3, -5)
blackjack <- c(-1, -2, 4,  0,  1,  -2, -1)
roulette <-  c(0,  -3, 3,  NA, 2,   1, -2)
lv <- poker + blackjack + roulette
which(lv > 0)
poker  + blackjack + roulette
which(1:10 > 3, arr.ind = TRUE)
which(1:10 > 3, arr.ind = FALSE)
which(1:10 > 3, arr.ind = FALSE)
firstGame <- poker + blackjack
which(roulette > poker )
roulette > blackjack
roulette > poker
day1 <- roulette > poker
day2 <- roulette > blackjack
day1 | day2
poker <-     c(2,   4, 1, -8,  1,   3, -5)
blackjack <- c(-1, -2, 4,  0,  1,  -2, -1)
roulette <-  c(0,  -3, 3,  1, 2,   1, -2)
firstGame <- poker + blackjack
winner <- which(firstGame > roulette)
winner
?duplitace
?unique
unique()
firstGame
roulette
firstGame <- unique(firstGame)
roulette <- unique(roulette)
firstGame
roulette
winner <- which(firstGame > roulette)
winner
poker <-     c(2,   4, 1, -8,  1,   3, -5)
blackjack <- c(-1, -2, 4,  0,  1,  -2, -1)
roulette <-  c(0,  -3, 3,  1, 2,   1, -2)
firstGame <- poker + blackjack
day1 <- roulette > poker
day2 <- roulette > blackjack
# firstGame <- unique(firstGame)
# roulette <- unique(roulette)
winner <- which(firstGame > roulette)
winner
winner <- which(day1 > day2)
winner
xVector
xVector <- c(1:20, 100.5)
xVectorMean <- mean(xVector)
xVectorSd   <- sd(xVector)
?mad
mad(c(1:9))
xVectorMad  <- mad(xVector, median(xVectorMean))
xVectorMedian <- median(xVector)
xVectorMad <- mad(xVector, center = median(xVector))
xVectorMad
xVectorMedian
plot(xVector)
cuttoff <- xVectorMedian + 3 * xVectorMad
cuttoff
cleanVector <- which(xVector < cuttoff)
cleanVector
n = 1000
set.seed(9898)
sim <- rnorm(n)
sim <- rnorm(n)
plot(sim)
simClean <- -3 < sim > 3
simClean <- -3 < sim
set.seed(9898)
n = 1000
sim <- rnorm(n)
?range
simClean <- sim %in% c(-3, 3)
simClean
simClean <- sim !(%in% c(-3, 3))
simClean <- sim %in% !( c(-3, 3)))
simClean <- median(sim) * 3 mad(sim)
sim <- rnorm(n)
simClean <- median(sim) * 3 mad(sim)
simClean <- median(sim) + 3 * mad(sim)
cutPoint <- median(sim) + 3 * mad(sim)
simClean <- which(sim > cutPoint | (sim < cutPoint))
set.seed(9898)
n = 1000
sim <- rnorm(n)
cutPoint <- median(sim) + 3 * mad(sim)
simClean <- which(sim > cutPoint | (sim < -cutPoint))
simClean
?mean
?median
?mad
?mean
trimmed.x <- mean(xVector, trim = 0.1 )
trimmed.x
plot(xVector)
install.packages("e1071")
cutPoint <- median(sim) + 3 * mad(sim)
cutPoint
?which
x <- matrix(NA, 5, 5)
x
iag(x) <- 0
x[1,2] <- 30; x[1,3] <- 10
x[2,4] <- 70; x[2,5] <- 40
x[3,4] <- 50; x[3,5] <- 20
x[4,5] <- 60
x[5,4] <- 10
x
version
diag(x) <- 0
?install.packages
# build a graph with 5 nodes
x <- matrix(NA, 5, 5)
diag(x) <- 0
x[1,2] <- 30; x[1,3] <- 10
x[2,4] <- 70; x[2,5] <- 40
x[3,4] <- 50; x[3,5] <- 20
x[4,5] <- 60
x[5,4] <- 10
print(x)
x
z <- allShortestPaths(x)
library(e1071)
z <- allShortestPaths(x)
print(z)
extractPath(z, 1, 4)
bclust(x, 2)
plot(z)
z
data(iris)
bc1 <- bclust(iris[,1:4], 3, base.centers=5)
plot(bc1)
iris
table(clusters.bclust(bc1, 3))
centers.bclust(bc1, 3)
library(e1071)
hamming.distance(1:3, 3:1)
1:3
3:1
x <- c(1, 0, 0)
y <- c(1, 0, 1)
hamming.distance(x, y)
x
y
x <- c(1, 0, 0)
y <- c(1, 0, 1)
hamming.distance(x, y)
?hamming.distance
?iterate
?iteration
??iterate
pi
rm(list = ls())
pi
pi
pi <- 3
search(pi)
search()
?kurtosis
x <- rnorm(100)
kurtosis(x)
set.seed(9898)
x <- rnorm(100)
kurtosis(x)
x <- rnorm(100)
kurtosis(x)
set.seed(9898)
x <- rnorm(100)
kurtosis(x)
set.seed(9898)
x <- rnorm(100)
kurtosis(x)
hist(x)
kurtosis(x, type = 1  )
kurtosis(x, type = 2  )
kurtosis(x, type = 3  )
hist(kurtosis())
hist(x)
xVector <- c(1:20, 100.5)
kurtosis(xVector, type = 3  )
hist(xVector)
kurtosis(xVector, type = 1  )
kurtosis(xVector, type = 2  )
kurtosis(xVector, type = 3  )
rep(1:3, each = 3 )
a <- matrix(rep(1:3, each = 3 ), ncol = 3 )
a
a <- matrix(rep(1:3, each = 3 ), nrow = 3 )
a
a <- matrix(t(rep(1:3, each = 3 )), nrow = 3 )
a
a <- t(matrix(rep(1:3, each = 3 ), nrow = 3 ))
a
?matrix
a2 <- matrix(rep(1:3, each = 3 ), ncol = 3, byrow = TRUE )
a2
a1[2][4]
a1[2]
a1[2:3
]
a1[,2]
a1 <- t(matrix(rep(1:3, each = 3 ), ncol = 3 ))
a1[2][4]
a1[2]
a1[,2]
a1[,2][2]
a1[,2 ][4] <-
a1[,2 ][4] <- 4
a1
a1[,2 ][4] <- 4
a1[,2]
a1[,2][2]
a1[,2][2] <- 4
a1
a3 <- matrix(1:3, nrow = 3, ncol =3)
a3
diag(a1)
diag(a2)[2] <- 4
s2
a2
data("mtcars")
rm(list = ls())
head(mtcars)
tail(mtcars)
rep(1:3, each= 3 )
t(rep(1:3, nrow = 3 ))
data("mtcars")
head(mtcars)
tail(mtcars)
install.packages("plotly")
help(mtcars)
class(mtcars$am)
mtcars$am <- as.factor(mtcars$am)
typeof(mtcars$am)
mtcars$am <- as.factor(mtcars$am)
mtcars$am <- as.factor(mtcars$am)
typeof(mtcars$am)
mtcars
mtcars$am <- as.factor(mtcars$am)
mtcars$am1 <- as.factor(mtcars$am)
str(mtcars)
mtcars$am1 <- NULL
library(plotly)
df <- data("mtcars")
plot_ly(df, x = ~mpg, y = ~cyl)
plot_ly(df, x = ~mpg, y = ~cyl)
df <- data(mtcars)
df
df <- data(mtcars)
df <- data("mtcars")
data("mtcars")
head(mtcars)
plot_ly(mtcars, x = ~mpg, y = ~cyl)
p <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="pie/donut")
chart_link
p <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(dplyr)
p <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plyr)
p <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6)
mtcars$manuf <- sapply(strsplit(rownames(mtcars), " "), "[[", 1)
p <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6)
#%>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
mtcars
mtcars$manuf <- sapply(strsplit(rownames(mtcars), " "), "[[", 1)
p <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6)
#%>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="pie/donut")
chart_link
mtcars$am <- as.factor(mtcars$am)
summary(mtcars$am)
levels(mtcars$am)
?sapply
v1 <- 1:10; v2 <- seq(0, 1, length = 10)
v1 <- 1:10; v2 <- seq(0, 1, length = 10) ; v3 <- letters[1:10]
df <- data.frame(vector1 = v1, vector2 = v2, ABC = v3)
View(df)
str(df)
df$ABC
plot(x = df$ABC , y = df$vector1)
plot(x = df$ABC , y = df$vector2)
?data.frame
df1 <- data.frame( Numvec = (sample(1:20, 10)), Charvector = letters[15:25])
df1 <- data.frame( Numvec = (sample(1:20, 10)), Charvector = letters[1:10])
df1
df1$fact <- factor(rep("male", "female"), times = 5 )
df1$fact <- factor(rep("male", "female"), times = 5 ))
df1$fact <- factor(rep("male", "female" ,times = 5))
df1
class(df1)
class(df1$fact)
df1 <- data.frame( Numvec = (sample(1:20, 10)), Charvector = letters[1:10], stringsAsFactors = FALSE)
df1$fact <- factor(rep("male", "female" ,times = 5))
df1
class(df1$fact)
extractPath(z, 1, 4)
x <- matrix(NA, 5, 5)
diag(x) <- 0
x[1,2] <- 30; x[1,3] <- 10
x[2,4] <- 70; x[2,5] <- 40
x[3,4] <- 50; x[3,5] <- 20
x[4,5] <- 60
x[5,4] <- 10
print(x)
## compute all path lengths
z <- allShortestPaths(x)
print(z)
## the following should give 1 -> 3 -> 5 -> 4
extractPath(z, 1, 4)
bclust(x, 2)
